"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/building_a_plugin/guides.html#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""
from typing import TYPE_CHECKING

import napari
import numpy as np
import dask.array as da
from magicgui import magic_factory
from magicgui.widgets import CheckBox, Container, create_widget
import qtpy.QtWidgets as qt
import qtpy.QtCore as qtcore
from skimage.util import img_as_float

from ._reader import get_nuclei_labels_from_stardist
from .utils import threshold_nuclei_dask, rgb2hed

if TYPE_CHECKING:
    import napari

def build_nuclei_pyramid(
        images,#: list[napari.layers._multiscale_data.MultiScaleData],
        labels: da.Array
    ) -> list[da.Array]:
    label_pyramids = []
    for image in images:
        n_levels = len(image.shapes)
        label_pyramid = [None] * n_levels
        label_pyramid[0] = labels
        for i,shape in enumerate(image.shapes[1:]):
            label_pyramid[i+1] = da.zeros(
                (shape[1], shape[0]),
                dtype=np.uint8,
                chunks=(256,256)
            )
        label_pyramids.append(label_pyramid)
    return label_pyramids

class Segment(qt.QWidget):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()

        self.viewer = viewer

        self.vbox = qt.QVBoxLayout(self)

        # Tools for stardist segmentation
        self.stardist_group = qt.QGroupBox("StarDist")
        self.sd_vbox = qt.QVBoxLayout()

        self.nms_thresh = qt.QSlider()
        self.nms_thresh.setToolTip("Boundary detection threshold")
        self.nms_thresh.setMaximum(100)
        self.nms_thresh.setMinimum(0)
        self.nms_thresh.setValue(20)
        self.nms_thresh.valueChanged.connect(self._on_nms_changed)
        self.nms_thresh.setOrientation(qtcore.Qt.Orientation.Horizontal)
        self.sd_vbox.addWidget(self.nms_thresh)

        self.prob_thresh = qt.QSlider()
        self.prob_thresh.setToolTip("Probability threshold for stardist")
        self.prob_thresh.setMaximum(1000000)
        self.prob_thresh.setMinimum(0)
        self.prob_thresh.setValue(800000)
        self.prob_thresh.valueChanged.connect(self._on_prob_tresh_changed)
        self.prob_thresh.setOrientation(qtcore.Qt.Orientation.Horizontal)
        self.sd_vbox.addWidget(self.prob_thresh)

        self.sd_apply_button = qt.QPushButton("Apply")
        self.sd_apply_button.clicked.connect(self._on_sd_apply)
        self.sd_vbox.addWidget(self.sd_apply_button)

        self.stardist_group.setLayout(self.sd_vbox)

        # Tools for HED thresholding
        self.he_threshold_group = qt.QGroupBox("HED Threshold")
        self.he_vbox = qt.QVBoxLayout()

        self.h_threshold = qt.QSlider()
        self.h_threshold.setToolTip("Hematoxylin channel threshold")
        self.h_threshold.setMaximum(1000)
        self.h_threshold.setMinimum(0)
        self.h_threshold.setValue(1)
        self.h_threshold.valueChanged.connect(self._on_h_changed)
        self.h_threshold.setOrientation(qtcore.Qt.Orientation.Horizontal)
        self.he_vbox.addWidget(self.h_threshold)

        self.e_threshold = qt.QSlider()
        self.e_threshold.setToolTip("Eosin channel threshold")
        self.e_threshold.setMaximum(1000)
        self.e_threshold.setMinimum(0)
        self.e_threshold.setValue(0)
        self.e_threshold.valueChanged.connect(self._on_e_changed)
        self.e_threshold.setOrientation(qtcore.Qt.Orientation.Horizontal)
        self.he_vbox.addWidget(self.e_threshold)

        self.d_threshold = qt.QSlider()
        self.d_threshold.setToolTip("DAB channel threshold")
        self.d_threshold.setMaximum(1000)
        self.d_threshold.setMinimum(0)
        self.d_threshold.setValue(0)
        self.d_threshold.valueChanged.connect(self._on_d_changed)
        self.d_threshold.setOrientation(qtcore.Qt.Orientation.Horizontal)
        self.he_vbox.addWidget(self.d_threshold)

        self.hed_apply_button = qt.QPushButton("Apply")
        self.hed_apply_button.clicked.connect(self._on_thresh_applied)
        self.he_vbox.addWidget(self.hed_apply_button)

        self.he_threshold_group.setLayout(self.he_vbox)

        self.vbox.addWidget(self.stardist_group)
        self.vbox.addWidget(self.he_threshold_group)


        self.prob_thresh_value = .8
        self.nms_thresh_value  = .2
        self.h_threshold_value = .001
        self.e_threshold_value = 0
        self.d_threshold_value = 0

    def get_image_layers(self): #-> list[napari.layers._multiscale_data.MultiScaleData]:
        """Get all image layers from the napari viewer.

        Returns:
            list[napari.layers._multiscale_data.MultiScaleData]: List of all underlying data in the image layers.
        """
        return [
            layer.data
                for layer in self.viewer.layers 
                if isinstance(layer, napari.layers.Image)
        ]

    def _on_nms_changed(self, nms: int):
        self.nms_thresh_value = nms / 100.0

    def _on_prob_tresh_changed(self, prob_thresh: int):
        self.prob_thresh_value = prob_thresh / 1000000.0
    
    def add_nuclei_layers(self, label_pyramid, name, **kwargs):
        for i,label in enumerate(label_pyramid):
            _name = name
            if i > 0:
                _name += f" ({i})"
            if _name in self.viewer.layers:
                del self.viewer.layers[_name]
            self.viewer.add_labels(label, 
                name=name,
                opacity=.8,
                multiscale=True,
                **kwargs
                )
            print(f"Added label {name}")
        
    def _on_sd_apply(self):
        """Called when the `Apply` button is pressed in StarDist.
        Applies the segmentation to all image layers.
        """
        layers = self.get_image_layers()
        if len(layers) == 0:
            return
        highest_res_label = get_nuclei_labels_from_stardist(
            layers[0], 
            prob_thresh=self.prob_thresh_value,
            nms_thresh=self.nms_thresh_value
            )
        label_pyramid = build_nuclei_pyramid(layers, highest_res_label)
        self.add_nuclei_layers(label_pyramid, "Nuclei Labels")

    def _on_h_changed(self, val: int):
        self.h_threshold_value = val / 1000
    
    def _on_e_changed(self, val: int):
        self.e_threshold_value = val / 1000
    
    def _on_d_changed(self, val: int):
        self.d_threshold_value = val / 1000

    def _on_thresh_applied(self):
        layers = self.get_image_layers()
        if len(layers) == 0:
            return 
        
        hed_image = rgb2hed(layers[0][0])
        highest_res_label = threshold_nuclei_dask(
            hed_image, 
            self.h_threshold_value, 
            self.e_threshold_value, 
            self.d_threshold_value
        )
        nuclei_label_colormap = {
            0: [1.0, 1.0, 1.0, 0.0],  # Label 0 (background): Transparent black
            1: [0.0, 1.0, 0.5, 0.8],  # Label 1 (nuclei): Semi-transparent green (adjust R,G,B,A as desired)
        }
        label_pyramid = build_nuclei_pyramid(layers, highest_res_label)
        self.add_nuclei_layers(
            label_pyramid,
            "Nuclei Labels (HED Threshold)",
            colormap=nuclei_label_colormap
            )

